obstacle_range: 4.0
raytrace_range: 5.0
footprint: [[-0.31, 0.315], [0.71, 0.315],[0.71, -0.315], [-0.31, -0.315]]
footprint_padding: 0.05
inflation_radius: 0.6

# observation_sources: laser_scan_sensor

# laser_scan_sensor: {sensor_frame: laser_frame, data_type: LaserScan, topic: scan, marking: true, clearing: true}


# robot_base_frame: base_link
# update_frequency: 4.0
# publish_frequency: 3.0
# transform_tolerance: 0.5

# resolution: 0.1

plugins:
- {name: static_layer, type: "costmap_2d::StaticLayer"}
- {name: obstacles_layer, type: "costmap_2d::ObstacleLayer"}
- {name: inflater_layer, type: "costmap_2d::InflationLayer"}

static_layer:
  unknown_cost_value: -1               # (int, default: -1) The value for which a cost should be considered unknown when reading in a map from the map server. If the costmap is not tracking unknown space, costs of this value will be considered occupied. A value of zero also results in this parameter being unused.
  lethal_cost_threshold: 100           # (int, default: 100) The threshold value at which to consider a cost lethal when reading in a map from the map server.
  map_topic: /map                      # (string, default: "map") The topic that the costmap subscribes to for the static map. This parameter is useful when you have multiple costmap instances within a single node that you want to use different static maps. - New in navigation 1.3.1
  first_map_only: false                # (bool, default: false) Only subscribe to the first message on the map topic, ignoring all subsequent messages
  subscribe_to_updates: true           # (bool, default: false) In addition to map_topic, also subscribe to map_topic + "_updates"
  track_unknown_space: true            # (bool, default: true) If true, unknown values in the map messages are translated directly to the layer. Otherwise, unknown values in the map message are translated as FREE_SPACE in the layer.
  # use_maximum: false                 # (bool, default: false) Only matters if the static layer is not the bottom layer. If true, only the maximum value will be written to the master costmap.
  trinary_costmap: true                # (bool, default: true) If true, translates all map message values to NO_INFORMATION/FREE_SPACE/LETHAL_OBSTACLE (three values). If false, a full spectrum of intermediate values is possible.

obstacles_layer:
  # Sensor management parameters
  observation_sources: laser_scan_sensor  # (string, default: "") A list of observation source names separated by spaces. This defines each of the <source_name> namespaces defined below.
                                          # Each source_name in observation_sources defines a namespace in which parameters can be set:
  laser_scan_sensor: {
    topic: scan,                          # (string, default: source_name) The topic on which sensor data comes in for this source. Defaults to the name of the source.
    sensor_frame: laser_frame,            # (string, default: "") The frame of the origin of the sensor. Leave empty to attempt to read the frame from sensor data. The frame can be read from both sensor_msgs/LaserScan, sensor_msgs/PointCloud, and sensor_msgs/PointCloud2 messages.
    observation_persistence: 0.0,         # (double, default: 0.0) How long to keep each sensor reading in seconds. A value of 0.0 will only keep the most recent reading.
    expected_update_rate: 15.0,           # (double, default: 0.0) How often to expect a reading from a sensor in seconds. A value of 0.0 will allow infinite time between readings. This parameter is used as a failsafe to keep the navigation stack from commanding the robot when a sensor has failed. It should be set to a value that is slightly more permissive than the actual rate of the sensor. For example, if we expect a scan from a laser every 0.05 seconds we might set this parameter to be 0.1 seconds to give a generous buffer and account for some amount of system latency.
    data_type: LaserScan,                 # (string, default: "PointCloud") The data type associated with the topic, right now only "PointCloud", "PointCloud2", and "LaserScan" are supported.
    clearing: true,                       # (bool, default: false) Whether or not this observation should be used to clear out freespace.
    marking: true,                        # (bool, default: true) Whether or not this observation should be used to mark obstacles.
    # max_obstacle_height: ,              # (double, default: 2.0) The maximum height in meters of a sensor reading considered valid. This is usually set to be slightly higher than the height of the robot. Setting this parameter to a value greater than the global max_obstacle_height parameter has no effect. Setting this parameter to a value less than the global max_obstacle_height will filter out points from this sensor above that height.
    # min_obstacle_height: ,              # (double, default: 0.0) The minimum height in meters of a sensor reading considered valid. This is usually set to be at ground height, but can be set higher or lower based on the noise model of your sensor.
    obstacle_range: 2.5,                  # (double, default: 2.5) The maximum range in meters at which to insert obstacles into the costmap using sensor data.
    raytrace_range: 3.0,                  # (double, default: 3.0) The maximum range in meters at which to raytrace out obstacles from the map using sensor data.
    inf_is_valid:  false                  # (bool, default: false) Allows for Inf values in "LaserScan" observation messages. The Inf values are converted to the laser maximum range.
  }


inflater_layer:
  inflation_radius: 0.55               # (double, default: 0.55) The radius in meters to which the map inflates obstacle cost values.
  cost_scaling_factor: 5.0             # (double, default: 10.0) A scaling factor to apply to cost values during inflation. The cost function is computed as follows for all cells in the costmap further than the inscribed radius distance and closer than the inflation radius distance away from an actual obstacle: exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1), where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254. NOTE: since the cost_scaling_factor is multiplied by a negative in the formula, increasing the factor will decrease the resulting cost values.


# #layer definitions
# static:
#     map_topic: /map
#     subscribe_to_updates: true

# obstacles_laser:
#     observation_sources: laser
#     laser: {data_type: LaserScan, clearing: true, marking: true, topic: scan, inf_is_valid: true}

# inflation:
#     inflation_radius: 0.6
