controller_frequency: 15.0
recovery_behaviour_enabled: true

TrajectoryPlannerROS:
  # Robot Configuration Parameters
  acc_lim_x: 0.7                      # (double, default: 2.5) The x acceleration limit of the robot in meters/sec^2
  acc_lim_y: 0                      # (double, default: 2.5) The y acceleration limit of the robot in meters/sec^2
  acc_lim_theta: 1.0                  # (double, default: 3.2) The rotational acceleration limit of the robot in radians/sec^2

  max_vel_x: 0.4                      # (double, default: 0.5) The maximum forward velocity allowed for the base in meters/sec
  min_vel_x: -0.1                      # (double, default: 0.1) The minimum forward velocity allowed for the base in meters/sec. It is useful to specify this to guarantee that velocity commands sent to a mobile base are high enough to allow the base to overcome friction.

  max_vel_theta: 0.7                  # (double, default: 1.0) The maximum rotational velocity allowed for the base in radians/sec
  min_vel_theta: -0.7                 # (double, default: -1.0) The minimum rotational velocity allowed for the base in radians/sec
  min_in_place_vel_theta: 0.2         # (double, default: 0.4) The minimum rotational velocity allowed for the base while performing in-place rotations in radians/sec

  holonomic_robot: false              # (bool, default: true) Determines whether velocity commands are generated for a holonomic or non-holonomic robot. For holonomic robots, strafing velocity commands may be issued to the base. For non-holonomic robots, no strafing velocity commands will be issued.
  escape_vel: -0.1                    # (double, default: -0.1) Speed used for driving during escapes in meters/sec. Note that it must be negative in order for the robot to actually reverse. A positive speed will cause the robot to move forward while attempting to escape. New in navigation 1.3.1


  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.05             # (double, default: 0.05) The tolerance in radians for the controller in yaw/rotation when achieving its goal
  xy_goal_tolerance: 0.071              # (double, default: 0.10) The tolerance in meters for the controller in the x & y distance when achieving a goal
  latch_xy_goal_tolerance: false      # (bool, default: false) If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so. - New in navigation 1.3.1


  # Forward Simulation Parameters
  sim_time: 2.0                       # (double, default: 1.0) The amount of time to forward-simulate trajectories in seconds
  sim_granularity: 0.025              # (double, default: 0.025) The step size, in meters, to take between points on a given trajectory
  angular_sim_granularity: 0.02       # (double, default: sim_granularity) The step size, in radians, to take between angular samples on a given trajectory. - New in navigation 1.3.1
  vx_samples: 6                       # (integer, default: 3) The number of samples to use when exploring the x velocity space
  vtheta_samples: 20                  # (integer, default: 20) The number of samples to use when exploring the theta velocity space
  controller_frequency: 10.0          # (double, default: 20.0) The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller. For use with move_base, this means that you only need to set its "controller_frequency" parameter and can safely leave this one unset. - New in navigation 1.3.1


  # Trajectory scoring parameters

  # The cost function used to score each trajectory is in the following form:
  # cost = 
  #   pdist_scale * (distance to path from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
  #   + gdist_scale * (distance to local goal from the endpoint of the trajectory in map cells or meters depending on the meter_scoring parameter) 
  #   + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

  meter_scoring: true                 # (bool, default: false) Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cells. Cells are assumed by default. New in navigation 1.3.1
  pdist_scale: 0.75                   # (double, default: 0.6) The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0
  gdist_scale: 1.0                    # (double, default: 0.8) The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0
  occdist_scale:  0.1                 # (double, default: 0.01) The weighting for how much the controller should attempt to avoid obstacles

  heading_lookahead: 0.325            # (double, default: 0.325) How far to look ahead in meters when scoring different in-place-rotation trajectories
  heading_scoring: false              # (bool, default: false) Whether to score based on the robot's heading to the path or its distance from the path
  heading_scoring_timestep: 0.8       # (double, default: 0.8) How far to look ahead in time in seconds along the simulated trajectory when using heading scoring
  dwa: false                          # (bool, default: true) Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout (NOTE: In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive. It is possible that robots with extremely poor acceleration limits could gain from running Trajectory Rollout, but we recommend trying DWA first.)
  publish_cost_grid_pc: true          # (bool, default: false) Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account. New in navigation 1.4.0
  global_frame_id: odom               # (string, default: odom) The frame to set for the cost_cloud. Should be set to the same frame as the local costmap's global frame. New in navigation 1.4.0


  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05        # (double, default: 0.05) How far the robot must travel in meters before oscillation flags are reset


  # Global Plan Parameters
  prune_plan: true                    # (bool, default: true) Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.


DWAPlannerROS:
  # Robot configuration parameters  
  acc_lim_x: 2.0            # (double, default: 2.5) The x acceleration limit of the robot in meters/sec^2
  acc_lim_y: 0            # (double, default: 2.5) The y acceleration limit of the robot in meters/sec^2
  acc_lim_th: 2.5          # (double, default: 3.2) The rotational acceleration limit of the robot in radians/sec^2
  max_trans_vel: 0.4        # (double, default: 0.55) The absolute value of the maximum translational velocity for the robot in m/s
  min_trans_vel: 0.1      # (double, default: 0.1) The absolute value of the minimum translational velocity for the robot in m/s
  max_vel_x: 0.4          # (double, default: 0.55) The maximum x velocity for the robot in m/s.
  min_vel_x: -0.3           # (double, default: 0.0) The minimum x velocity for the robot in m/s, negative for backwards motion.
  max_vel_y: 0.0              # (double, default: 0.1) The maximum y velocity for the robot in m/s
  min_vel_y: 0.0          # (double, default: -0.1) The minimum y velocity for the robot in m/s
  max_rot_vel: 0.8        # (double, default: 1.0) The absolute value of the maximum rotational velocity for the robot in rad/s
  min_rot_vel: -0.8         # (double, default: 0.4) The absolute value of the minimum rotational velocity for the robot in rad/s

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.05            # (double, default: 0.05) The tolerance in radians for the controller in yaw/rotation when achieving its goal
  xy_goal_tolerance: 0.1             # (double, default: 0.10) The tolerance in meters for the controller in the x & y distance when achieving a goal
  latch_xy_goal_tolerance: false        # (bool, default: false) If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.

  # Forward Simulation Parameters
  sim_time: 2.0                        # (double, default: 1.7) The amount of time to forward-simulate trajectories in seconds
  sim_granularity: 0.02           # (double, default: 0.025) The step size, in meters, to take between points on a given trajectory
  vx_samples: 6             # (integer, default: 3) The number of samples to use when exploring the x velocity space
  vy_samples: 0            # (integer, default: 10) The number of samples to use when exploring the y velocity space
  vth_samples: 20             # (integer, default: 20) The number of samples to use when exploring the theta velocity space
  controller_frequency: 15   # (double, default: 20.0) The frequency at which this controller will be called in Hz. Uses searchParam to read the parameter from parent namespaces if not set in the namespace of the controller. For use with move_base, this means that you only need to set its "controller_frequency" parameter and can safely leave this one unset.

  # Trajectory scoring parameters
  # The cost function used to score each trajectory is in the following form:
  # cost =
  #   path_distance_bias * (distance to path from the endpoint of the trajectory in meters)
  #   + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters)
  #   + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))

  path_distance_bias: 32.0          # (double, default: 32.0) The weighting for how much the controller should stay close to the path it was given
  goal_distance_bias: 24.0            # (double, default: 24.0) The weighting for how much the controller should attempt to reach its local goal, also controls speed
  occdist_scale: 0.01               # (double, default: 0.01) The weighting for how much the controller should attempt to avoid obstacles
  forward_point_distance: 0.325       # (double, default: 0.325) The distance from the center point of the robot to place an additional scoring point, in meters
  stop_time_buffer: 0.2             # (double, default: 0.2) The amount of time that the robot must stop before a collision in order for a trajectory to be considered valid in seconds
  scaling_speed: 0.25               # (double, default: 0.25) The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
  max_scaling_factor: 0.2           # (double, default: 0.2) The maximum factor to scale the robot's footprint by
  publish_cost_grid: false          # (bool, default: false) Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.25      # (double, default: 0.05) How far the robot must travel in meters before oscillation flags are reset
  
  # Global Plan Parameters
  prune_plan: true               # (bool, default: true) Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.




TebLocalPlannerROS:
  odom_topic: odom
  map_frame: /map
      
  # Trajectory
    
  teb_autosize: True
  dt_ref: 0.3
  dt_hysteresis: 0.1
  global_plan_overwrite_orientation: True
  max_global_plan_lookahead_dist: 3.0
  feasibility_check_no_poses: 5
      
  # Robot
          
  max_vel_x: 0.4
  max_vel_x_backwards: 0.2
  max_vel_theta: 0.5
  acc_lim_x: 0.5
  acc_lim_theta: 0.5
  min_turning_radius: 0.0
  footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
    type: "polygon"
    radius: 0.2 # for type "circular"
    line_start: [-0.3, 0.0] # for type "line"
    line_end: [0.3, 0.0] # for type "line"
    front_offset: 0.2 # for type "two_circles"
    front_radius: 0.2 # for type "two_circles"
    rear_offset: 0.2 # for type "two_circles"
    rear_radius: 0.2 # for type "two_circles"
    vertices: [[-0.21, 0.26], [0.49, 0.26], [0.68, 0.17],[0.68, -0.17], [0.49, -0.26], [-0.21, -0.26]] # for type "polygon"

  # GoalTolerance
      
  xy_goal_tolerance: 0.2
  yaw_goal_tolerance: 0.1
  free_goal_vel: False
      
  # Obstacles
      
  min_obstacle_dist: 0.4
  include_costmap_obstacles: True
  costmap_obstacles_behind_robot_dist: 1.0
  obstacle_poses_affected: 30
  costmap_converter_plugin: ""
  costmap_converter_spin_thread: True
  costmap_converter_rate: 5

  # Optimization
      
  no_inner_iterations: 5
  no_outer_iterations: 4
  optimization_activate: True
  optimization_verbose: False
  penalty_epsilon: 0.1
  weight_max_vel_x: 2
  weight_max_vel_theta: 1
  weight_acc_lim_x: 1
  weight_acc_lim_theta: 1
  weight_kinematics_nh: 1000
  weight_kinematics_forward_drive: 1
  weight_kinematics_turning_radius: 1
  weight_optimaltime: 1
  weight_obstacle: 50
  weight_dynamic_obstacle: 10 # not in use yet
  alternative_time_cost: False # not in use yet

  # Homotopy Class Planner

  enable_homotopy_class_planning: True
  enable_multithreading: True
  simple_exploration: False
  max_number_classes: 3
  roadmap_graph_no_samples: 15
  roadmap_graph_area_width: 5
  h_signature_prescaler: 0.5
  h_signature_threshold: 0.1
  obstacle_keypoint_offset: 0.1
  obstacle_heading_threshold: 0.45
  visualize_hc_graph: False